cmake_minimum_required(VERSION 3.28.0 FATAL_ERROR)
project(poor-man-s-cache VERSION 0.1.0 LANGUAGES CXX)

set(CMAKE_CXX_STANDARD 23)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -DDEBUG")
set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE}")

include(CheckCXXCompilerFlag)
if (CMAKE_CXX_COMPILER_ID MATCHES "Clang" OR CMAKE_CXX_COMPILER_ID STREQUAL "GNU" OR CMAKE_CXX_COMPILER_ID STREQUAL "AppleClang")
    message("Looking for -fsanitize=${flag}")
    set(CMAKE_REQUIRED_FLAGS "-Werror -fsanitize=${flag}")
    check_cxx_compiler_flag(-fsanitize=${flag} HAVE_FLAG_SANITIZER)
    if (HAVE_FLAG_SANITIZER)
        message("Adding -fsanitize=${flag}")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fsanitize=${flag} -fno-omit-frame-pointer")
        set(DCMAKE_C_FLAGS "${DCMAKE_C_FLAGS} -fsanitize=${flag} -fno-omit-frame-pointer")
        set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -fsanitize=${flag}")
        set(DCMAKE_MODULE_LINKER_FLAGS "${DCMAKE_MODULE_LINKER_FLAGS} -fsanitize=${flag}")
    else ()
        message("-fsanitize=${flag} unavailable")
    endif ()
endif ()

find_package(prometheus-cpp CONFIG REQUIRED)
find_package(ZLIB REQUIRED)

if(NOT DEFINED prometheus-cpp_VERSION)
  message(FATAL_ERROR "prometheus-cpp_VERSION is not defined")
endif()

add_subdirectory(src)